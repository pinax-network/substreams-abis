#[cfg(test)]
mod tests {
    use substreams::{hex, scalar::BigInt};
    use substreams_abis::evm::seaport::events::OrderFulfilled;
    use substreams_ethereum::pb::eth::v2::Log;

    #[test]
    fn test_seaport_log() {
        // Example log for OrderFulfilled event
        // https://etherscan.io/tx/0xa89c4e327e91944081e13d90701861552a09640721527809085e604b65056588#eventlog
        let log = Log {
            topics: vec![
                hex!("9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31").to_vec(),
                hex!("0000000000000000000000005c34e725cca657f02c1d81fb16142f6f0067689b").to_vec(),
                hex!("000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00").to_vec(),
            ],
            data: hex!("d3b3bf7a4a36ca79f3d565a1d7ed33baef97b8db0e56695b4db9ffe286194313000000000000000000000000caeed014e8ec72cba7adcd979ba0cda71f04215c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000045359616610a584cc39aecdcbb2a4579767800230000000000000000000000000000000000000000000000000000000000000b790000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000117541c86d20000000000000000000000000005c34e725cca657f02c1d81fb16142f6f0067689b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017a598c3a0000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec77f7a440000000000000000000000000006f452562d7e0e9df2135b5f797cff9a34b0b550c").to_vec(),
            address: hex!("0000000000000068F116a894984e2DB1123eB395").to_vec(), // ENS Public Resolver
            block_index: 0,
            index: 0,
            ordinal: 0,
        };

        match OrderFulfilled::decode(&log) {
            Ok(event) => {
                assert_eq!(
                    event.recipient,
                    hex!("caeEd014e8Ec72CBA7AdcD979ba0cDa71F04215C")
                );
                // offer
                let item_type = event.offer[0].0.clone();
                let token: Vec<u8> = event.offer[0].1.clone();
                let identifier = event.offer[0].2.clone();
                let amount = event.offer[0].3.clone();
                assert_eq!(item_type, BigInt::try_from("2".to_string()).unwrap());
                assert_eq!(token, hex!("45359616610A584CC39AecdcBb2A457976780023"));
                assert_eq!(identifier, BigInt::try_from("2937".to_string()).unwrap());
                assert_eq!(amount, BigInt::try_from("1".to_string()).unwrap());

                // consideration
                let amount_offerer = event.consideration[0].3.clone();
                let amount_fee = event.consideration[1].3.clone();
                let amount_collection = event.consideration[2].3.clone();
                assert_eq!(amount_offerer, BigInt::try_from("4914000000000000".to_string()).unwrap());
                assert_eq!(amount_fee, BigInt::try_from("26000000000000".to_string()).unwrap());
                assert_eq!(amount_collection, BigInt::try_from("260000000000000".to_string()).unwrap());
            }
            Err(e) => {
                panic!("Error decoding event: {:?}", e);
            }
        }
    }
    #[test]
    fn test_seaport_log2() {
        // Example log for OrderFulfilled event
        // https://etherscan.io/tx/0x6c316f62db9e31fe1f4b911c4ac162b0367f824420937d9f86573c6d539267de#eventlog
        let log = Log {
            topics: vec![
                hex!("9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31").to_vec(),
                hex!("000000000000000000000000deec6e7eb54f378bcca8f34f395343a1a0fe4f53").to_vec(),
                hex!("0000000000000000000000000000000000000000000000000000000000000000").to_vec(),
            ],
            data: hex!("38ca3ebc69812959e1a90cace8c4768045a3b4b9f79af57a6bffc0583962d8b9000000000000000000000000e8491182b2984ac87633ef86fd8682344732aa5800000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000003fc3a022eb15352d3f5e4e6d6f02bbfc57d9c1590000000000000000000000000000000000000000000000000000000000000e75000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018bea16edc5000000000000000000000000000deec6e7eb54f378bcca8f34f395343a1a0fe4f5300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fd5129130000000000000000000000000000000a26b00c1f0df003000390027140000faa719").to_vec(),
            address: hex!("0000000000000068F116a894984e2DB1123eB395").to_vec(), // ENS Public Resolver
            block_index: 0,
            index: 0,
            ordinal: 0,
        };

        match OrderFulfilled::decode(&log) {
            Ok(event) => {
                // consideration
                let amount_offerer = event.consideration[0].3.clone();
                let amount_fee = event.consideration[1].3.clone();
                assert_eq!(amount_offerer, BigInt::try_from("6965000000000000".to_string()).unwrap());
                assert_eq!(amount_fee, BigInt::try_from("35000000000000".to_string()).unwrap());
            }
            Err(e) => {
                panic!("Error decoding event: {:?}", e);
            }
        }
    }
}
